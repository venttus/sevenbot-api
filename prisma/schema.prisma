generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  User                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Answer {
  createdAt  DateTime @default(now())
  resultId   String
  groupId    String
  blockId    String
  content    String
  variableId String?
  Result     Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, blockId, groupId])
}

model AnswerV2 {
  id       Int    @id @default(autoincrement())
  blockId  String
  content  String
  resultId String
  Result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@index([blockId])
}

model ApiToken {
  id        String   @id
  token     String   @unique
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model BannedIp {
  id                   String   @id
  createdAt            DateTime @default(now())
  ip                   String   @unique
  responsibleTypebotId String
  userId               String
  Typebot              Typebot  @relation(fields: [responsibleTypebotId], references: [id])
  User                 User     @relation(fields: [userId], references: [id])
}

model ChatSession {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  state      Json
  isReplying Boolean?
}

model ClaimableCustomPlan {
  id           String    @id
  createdAt    DateTime  @default(now())
  claimedAt    DateTime?
  name         String
  description  String?
  price        Int
  currency     String
  workspaceId  String    @unique
  chatsLimit   Int
  storageLimit Int
  seatsLimit   Int
  companyName  String?
  isYearly     Boolean   @default(false)
  vatType      String?
  vatValue     String?
  Workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model CollaboratorsOnTypebots {
  userId    String
  typebotId String
  type      CollaborationType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  Typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  User      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, typebotId])
}

model Coupon {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Credentials {
  id          String    @id
  data        String
  name        String
  type        String
  iv          String
  createdAt   DateTime  @default(now())
  workspaceId String
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model CustomDomain {
  name        String    @id
  createdAt   DateTime  @default(now())
  workspaceId String
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model DashboardFolder {
  id                    String            @id
  createdAt             DateTime          @default(now())
  name                  String
  parentFolderId        String?
  updatedAt             DateTime          @default(now())
  workspaceId           String
  DashboardFolder       DashboardFolder?  @relation("DashboardFolderToDashboardFolder", fields: [parentFolderId], references: [id])
  other_DashboardFolder DashboardFolder[] @relation("DashboardFolderToDashboardFolder")
  Workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Typebot               Typebot[]
}

model Invitation {
  email     String
  typebotId String
  type      CollaborationType
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  Typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)

  @@unique([email, typebotId])
}

model Log {
  id          String   @id
  createdAt   DateTime @default(now())
  resultId    String
  status      String
  description String
  details     String?
  Result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@index([resultId])
}

model MemberInWorkspace {
  userId      String
  workspaceId String
  role        WorkspaceRole
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model PublicTypebot {
  id        String   @id
  typebotId String   @unique
  groups    Json
  variables Json
  edges     Json
  theme     Json
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  version   String?
  events    Json?
  Typebot   Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}

model Result {
  id                     String                   @id
  createdAt              DateTime                 @default(now())
  typebotId              String
  isCompleted            Boolean
  variables              Json
  hasStarted             Boolean?
  isArchived             Boolean?                 @default(false)
  lastChatSessionId      String?
  Answer                 Answer[]
  AnswerV2               AnswerV2[]
  Log                    Log[]
  Typebot                Typebot                  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  SetVariableHistoryItem SetVariableHistoryItem[]
  VisitedEdge            VisitedEdge[]

  @@index([typebotId, hasStarted, createdAt(sort: Desc)])
  @@index([typebotId, isCompleted])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SetVariableHistoryItem {
  resultId   String
  index      Int
  variableId String
  blockId    String
  value      Json
  Result     Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, index])
}

model ThemeTemplate {
  id          String    @id
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  name        String
  theme       Json
  workspaceId String
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Typebot {
  id                      String                    @id
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now())
  name                    String
  folderId                String?
  groups                  Json
  variables               Json
  edges                   Json
  theme                   Json
  settings                Json
  publicId                String?                   @unique
  customDomain            String?                   @unique
  icon                    String?
  workspaceId             String
  resultsTablePreferences Json?
  isArchived              Boolean                   @default(false)
  isClosed                Boolean                   @default(false)
  version                 String?
  selectedThemeTemplateId String?
  whatsAppCredentialsId   String?
  events                  Json?
  riskLevel               Int?
  BannedIp                BannedIp[]
  CollaboratorsOnTypebots CollaboratorsOnTypebots[]
  Invitation              Invitation[]
  PublicTypebot           PublicTypebot?
  Result                  Result[]
  DashboardFolder         DashboardFolder?          @relation(fields: [folderId], references: [id])
  Workspace               Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Webhook                 Webhook[]

  @@index([isArchived, createdAt(sort: Desc)])
  @@index([workspaceId])
}

model User {
  id                          String                    @id
  name                        String?
  email                       String?                   @unique
  emailVerified               DateTime?
  image                       String?
  createdAt                   DateTime                  @default(now())
  lastActivityAt              DateTime                  @default(now())
  updatedAt                   DateTime                  @default(now())
  company                     String?
  onboardingCategories        Json
  graphNavigation             GraphNavigation?
  preferredAppAppearance      String?
  displayedInAppNotifications Json?
  referral                    String?
  Account                     Account[]
  ApiToken                    ApiToken[]
  BannedIp                    BannedIp[]
  CollaboratorsOnTypebots     CollaboratorsOnTypebots[]
  MemberInWorkspace           MemberInWorkspace[]
  Session                     Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VisitedEdge {
  resultId String
  edgeId   String
  index    Int
  Result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, index])
}

model Webhook {
  id          String   @id
  url         String?
  method      String
  queryParams Json
  headers     Json
  body        String?
  typebotId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Typebot     Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}

model Workspace {
  id                            String                @id
  name                          String
  icon                          String?
  createdAt                     DateTime              @default(now())
  plan                          Plan                  @default(FREE)
  stripeId                      String?               @unique
  additionalChatsIndex          Int                   @default(0)
  additionalStorageIndex        Int                   @default(0)
  chatsLimitFirstEmailSentAt    DateTime?
  chatsLimitSecondEmailSentAt   DateTime?
  storageLimitFirstEmailSentAt  DateTime?
  storageLimitSecondEmailSentAt DateTime?
  customChatsLimit              Int?
  customSeatsLimit              Int?
  customStorageLimit            Int?
  updatedAt                     DateTime              @default(now())
  isQuarantined                 Boolean               @default(false)
  isSuspended                   Boolean               @default(false)
  isPastDue                     Boolean               @default(false)
  isVerified                    Boolean?
  ClaimableCustomPlan           ClaimableCustomPlan?
  Credentials                   Credentials[]
  CustomDomain                  CustomDomain[]
  DashboardFolder               DashboardFolder[]
  MemberInWorkspace             MemberInWorkspace[]
  ThemeTemplate                 ThemeTemplate[]
  Typebot                       Typebot[]
  WorkspaceInvitation           WorkspaceInvitation[]
}

model WorkspaceInvitation {
  id          String        @id
  createdAt   DateTime      @default(now())
  email       String
  workspaceId String
  type        WorkspaceRole
  updatedAt   DateTime      @default(now())
  Workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum CollaborationType {
  READ
  WRITE
  FULL_ACCESS
}

enum GraphNavigation {
  MOUSE
  TRACKPAD
}

enum Plan {
  FREE
  STARTER
  PRO
  LIFETIME
  OFFERED
  CUSTOM
  UNLIMITED
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
}
